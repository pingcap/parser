// Code generated by goyacc DO NOT EDIT.

// Copyright 2020 PingCAP, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// See the License for the specific language governing permissions and
// limitations under the License.

package parser

import __yyfmt__ "fmt"

import (
	"math"
	"strconv"

	"github.com/pingcap/parser/ast"
	"github.com/pingcap/parser/model"
)

type yyhintSymType struct {
	yys    int
	ident  string
	number uint64
	hint   *ast.TableOptimizerHint
	hints  []*ast.TableOptimizerHint
	table  ast.HintTable
}

type yyhintXError struct {
	state, xsym int
}

const (
	yyhintDefault             = 57407
	yyhintEOFCode             = 57344
	yyhintErrCode             = 57345
	hintAggToCop              = 57376
	hintBKA                   = 57354
	hintBNL                   = 57356
	hintDupsWeedOut           = 57403
	hintEnablePlanCache       = 57377
	hintFalse                 = 57399
	hintFirstMatch            = 57404
	hintGB                    = 57402
	hintHashAgg               = 57378
	hintHashJoin              = 57358
	hintIdentifier            = 57347
	hintIgnoreIndex           = 57379
	hintIndexMerge            = 57362
	hintInlHashJoin           = 57380
	hintInlJoin               = 57381
	hintInlMergeJoin          = 57382
	hintIntLit                = 57346
	hintJoinFixedOrder        = 57350
	hintJoinOrder             = 57351
	hintJoinPrefix            = 57352
	hintJoinSuffix            = 57353
	hintLooseScan             = 57405
	hintMB                    = 57401
	hintMRR                   = 57364
	hintMaterialization       = 57406
	hintMaxExecutionTime      = 57372
	hintMemoryQuota           = 57383
	hintMerge                 = 57360
	hintNoBKA                 = 57355
	hintNoBNL                 = 57357
	hintNoHashJoin            = 57359
	hintNoICP                 = 57366
	hintNoIndexMerge          = 57363
	hintNoMRR                 = 57365
	hintNoMerge               = 57361
	hintNoRangeOptimization   = 57367
	hintNoSemijoin            = 57371
	hintNoSkipScan            = 57369
	hintNoSwapJoinInputs      = 57384
	hintOLAP                  = 57395
	hintOLTP                  = 57396
	hintQBName                = 57375
	hintQueryType             = 57385
	hintReadConsistentReplica = 57386
	hintReadFromStorage       = 57387
	hintResourceGroup         = 57374
	hintSMJoin                = 57388
	hintSemijoin              = 57370
	hintSetVar                = 57373
	hintSingleAtIdentifier    = 57348
	hintSkipScan              = 57368
	hintStreamAgg             = 57389
	hintStringLit             = 57349
	hintSwapJoinInputs        = 57390
	hintTiFlash               = 57398
	hintTiKV                  = 57397
	hintTrue                  = 57400
	hintUseIndex              = 57392
	hintUseIndexMerge         = 57391
	hintUsePlanCache          = 57393
	hintUseToja               = 57394

	yyhintMaxDepth = 200
	yyhintTabOfs   = -163
)

var (
	yyhintXLAT = map[int]int{
		41:    0,   // ')' (129x)
		57376: 1,   // hintAggToCop (113x)
		57354: 2,   // hintBKA (113x)
		57356: 3,   // hintBNL (113x)
		57377: 4,   // hintEnablePlanCache (113x)
		57378: 5,   // hintHashAgg (113x)
		57358: 6,   // hintHashJoin (113x)
		57379: 7,   // hintIgnoreIndex (113x)
		57362: 8,   // hintIndexMerge (113x)
		57380: 9,   // hintInlHashJoin (113x)
		57381: 10,  // hintInlJoin (113x)
		57382: 11,  // hintInlMergeJoin (113x)
		57350: 12,  // hintJoinFixedOrder (113x)
		57351: 13,  // hintJoinOrder (113x)
		57352: 14,  // hintJoinPrefix (113x)
		57353: 15,  // hintJoinSuffix (113x)
		57372: 16,  // hintMaxExecutionTime (113x)
		57383: 17,  // hintMemoryQuota (113x)
		57360: 18,  // hintMerge (113x)
		57364: 19,  // hintMRR (113x)
		57355: 20,  // hintNoBKA (113x)
		57357: 21,  // hintNoBNL (113x)
		57359: 22,  // hintNoHashJoin (113x)
		57366: 23,  // hintNoICP (113x)
		57363: 24,  // hintNoIndexMerge (113x)
		57361: 25,  // hintNoMerge (113x)
		57365: 26,  // hintNoMRR (113x)
		57367: 27,  // hintNoRangeOptimization (113x)
		57371: 28,  // hintNoSemijoin (113x)
		57369: 29,  // hintNoSkipScan (113x)
		57384: 30,  // hintNoSwapJoinInputs (113x)
		57375: 31,  // hintQBName (113x)
		57385: 32,  // hintQueryType (113x)
		57386: 33,  // hintReadConsistentReplica (113x)
		57387: 34,  // hintReadFromStorage (113x)
		57374: 35,  // hintResourceGroup (113x)
		57370: 36,  // hintSemijoin (113x)
		57373: 37,  // hintSetVar (113x)
		57368: 38,  // hintSkipScan (113x)
		57388: 39,  // hintSMJoin (113x)
		57389: 40,  // hintStreamAgg (113x)
		57390: 41,  // hintSwapJoinInputs (113x)
		57392: 42,  // hintUseIndex (113x)
		57391: 43,  // hintUseIndexMerge (113x)
		57393: 44,  // hintUsePlanCache (113x)
		57394: 45,  // hintUseToja (113x)
		44:    46,  // ',' (109x)
		57403: 47,  // hintDupsWeedOut (94x)
		57404: 48,  // hintFirstMatch (94x)
		57405: 49,  // hintLooseScan (94x)
		57406: 50,  // hintMaterialization (94x)
		57398: 51,  // hintTiFlash (94x)
		57397: 52,  // hintTiKV (94x)
		57399: 53,  // hintFalse (93x)
		57395: 54,  // hintOLAP (93x)
		57396: 55,  // hintOLTP (93x)
		57400: 56,  // hintTrue (93x)
		57402: 57,  // hintGB (91x)
		57401: 58,  // hintMB (91x)
		57347: 59,  // hintIdentifier (90x)
		57348: 60,  // hintSingleAtIdentifier (76x)
		93:    61,  // ']' (72x)
		46:    62,  // '.' (61x)
		61:    63,  // '=' (59x)
		40:    64,  // '(' (53x)
		57344: 65,  // $end (22x)
		57422: 66,  // Identifier (22x)
		57415: 67,  // HintTable (10x)
		57428: 68,  // QueryBlockOpt (10x)
		57420: 69,  // HintTableQB (7x)
		57346: 70,  // hintIntLit (6x)
		57409: 71,  // CommaOpt (4x)
		57416: 72,  // HintTableList (4x)
		57417: 73,  // HintTableListGlobalQB (4x)
		57418: 74,  // HintTableListLocalQB (4x)
		91:    75,  // '[' (3x)
		57423: 76,  // IndexNameList (3x)
		57424: 77,  // IndexNameListOpt (3x)
		57408: 78,  // BooleanHintName (2x)
		57410: 79,  // HintIndexList (2x)
		57412: 80,  // HintStorageType (2x)
		57413: 81,  // HintStorageTypeAndTable (2x)
		57419: 82,  // HintTableListOpt (2x)
		57425: 83,  // JoinOrderOptimizerHintName (2x)
		57426: 84,  // NullaryHintName (2x)
		57430: 85,  // StorageOptimizerHintOpt (2x)
		57431: 86,  // SubqueryOptimizerHintName (2x)
		57434: 87,  // SubqueryStrategy (2x)
		57435: 88,  // SupportedIndexLevelOptimizerHintName (2x)
		57436: 89,  // SupportedTableLevelOptimizerHintName (2x)
		57437: 90,  // TableOptimizerHintOpt (2x)
		57439: 91,  // UnsupportedIndexLevelOptimizerHintName (2x)
		57440: 92,  // UnsupportedTableLevelOptimizerHintName (2x)
		57411: 93,  // HintQueryType (1x)
		57414: 94,  // HintStorageTypeAndTableList (1x)
		57349: 95,  // hintStringLit (1x)
		57421: 96,  // HintTrueOrFalse (1x)
		57427: 97,  // OptimizerHintList (1x)
		57429: 98,  // Start (1x)
		57432: 99,  // SubqueryStrategies (1x)
		57433: 100, // SubqueryStrategiesOpt (1x)
		57438: 101, // UnitOfBytes (1x)
		57441: 102, // Value (1x)
		57407: 103, // $default (0x)
		57345: 104, // error (0x)
	}

	yyhintSymNames = []string{
		"')'",
		"hintAggToCop",
		"hintBKA",
		"hintBNL",
		"hintEnablePlanCache",
		"hintHashAgg",
		"hintHashJoin",
		"hintIgnoreIndex",
		"hintIndexMerge",
		"hintInlHashJoin",
		"hintInlJoin",
		"hintInlMergeJoin",
		"hintJoinFixedOrder",
		"hintJoinOrder",
		"hintJoinPrefix",
		"hintJoinSuffix",
		"hintMaxExecutionTime",
		"hintMemoryQuota",
		"hintMerge",
		"hintMRR",
		"hintNoBKA",
		"hintNoBNL",
		"hintNoHashJoin",
		"hintNoICP",
		"hintNoIndexMerge",
		"hintNoMerge",
		"hintNoMRR",
		"hintNoRangeOptimization",
		"hintNoSemijoin",
		"hintNoSkipScan",
		"hintNoSwapJoinInputs",
		"hintQBName",
		"hintQueryType",
		"hintReadConsistentReplica",
		"hintReadFromStorage",
		"hintResourceGroup",
		"hintSemijoin",
		"hintSetVar",
		"hintSkipScan",
		"hintSMJoin",
		"hintStreamAgg",
		"hintSwapJoinInputs",
		"hintUseIndex",
		"hintUseIndexMerge",
		"hintUsePlanCache",
		"hintUseToja",
		"','",
		"hintDupsWeedOut",
		"hintFirstMatch",
		"hintLooseScan",
		"hintMaterialization",
		"hintTiFlash",
		"hintTiKV",
		"hintFalse",
		"hintOLAP",
		"hintOLTP",
		"hintTrue",
		"hintGB",
		"hintMB",
		"hintIdentifier",
		"hintSingleAtIdentifier",
		"']'",
		"'.'",
		"'='",
		"'('",
		"$end",
		"Identifier",
		"HintTable",
		"QueryBlockOpt",
		"HintTableQB",
		"hintIntLit",
		"CommaOpt",
		"HintTableList",
		"HintTableListGlobalQB",
		"HintTableListLocalQB",
		"'['",
		"IndexNameList",
		"IndexNameListOpt",
		"BooleanHintName",
		"HintIndexList",
		"HintStorageType",
		"HintStorageTypeAndTable",
		"HintTableListOpt",
		"JoinOrderOptimizerHintName",
		"NullaryHintName",
		"StorageOptimizerHintOpt",
		"SubqueryOptimizerHintName",
		"SubqueryStrategy",
		"SupportedIndexLevelOptimizerHintName",
		"SupportedTableLevelOptimizerHintName",
		"TableOptimizerHintOpt",
		"UnsupportedIndexLevelOptimizerHintName",
		"UnsupportedTableLevelOptimizerHintName",
		"HintQueryType",
		"HintStorageTypeAndTableList",
		"hintStringLit",
		"HintTrueOrFalse",
		"OptimizerHintList",
		"Start",
		"SubqueryStrategies",
		"SubqueryStrategiesOpt",
		"UnitOfBytes",
		"Value",
		"$default",
		"error",
	}

	yyhintReductions = []struct{ xsym, components int }{
		{0, 1},
		{98, 1},
		{97, 1},
		{97, 3},
		{97, 1},
		{97, 3},
		{90, 4},
		{90, 4},
		{90, 4},
		{90, 4},
		{90, 4},
		{90, 4},
		{90, 5},
		{90, 5},
		{90, 6},
		{90, 4},
		{90, 4},
		{90, 6},
		{90, 5},
		{90, 4},
		{90, 5},
		{85, 5},
		{94, 1},
		{94, 3},
		{81, 4},
		{68, 0},
		{68, 1},
		{71, 0},
		{71, 1},
		{72, 1},
		{72, 1},
		{82, 1},
		{82, 1},
		{73, 1},
		{73, 2},
		{73, 3},
		{74, 1},
		{74, 3},
		{67, 1},
		{67, 3},
		{69, 2},
		{69, 4},
		{79, 4},
		{79, 3},
		{79, 3},
		{77, 0},
		{77, 1},
		{76, 1},
		{76, 3},
		{100, 0},
		{100, 1},
		{99, 1},
		{99, 3},
		{102, 1},
		{102, 1},
		{102, 1},
		{101, 1},
		{101, 1},
		{96, 1},
		{96, 1},
		{83, 1},
		{83, 1},
		{83, 1},
		{92, 1},
		{92, 1},
		{92, 1},
		{92, 1},
		{92, 1},
		{92, 1},
		{92, 1},
		{89, 1},
		{89, 1},
		{89, 1},
		{89, 1},
		{89, 1},
		{89, 1},
		{89, 1},
		{91, 1},
		{91, 1},
		{91, 1},
		{91, 1},
		{91, 1},
		{91, 1},
		{91, 1},
		{88, 1},
		{88, 1},
		{88, 1},
		{86, 1},
		{86, 1},
		{87, 1},
		{87, 1},
		{87, 1},
		{87, 1},
		{78, 1},
		{78, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{93, 1},
		{93, 1},
		{80, 1},
		{80, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
		{66, 1},
	}

	yyhintXErrors = map[yyhintXError]string{}

	yyhintParseTab = [242][]uint16{
		// 0
		{1: 218, 187, 189, 214, 216, 200, 209, 201, 196, 195, 199, 168, 184, 185, 186, 175, 179, 192, 202, 188, 190, 191, 204, 219, 193, 203, 205, 212, 207, 198, 178, 182, 220, 183, 177, 211, 176, 206, 194, 217, 197, 208, 210, 215, 213, 78: 180, 83: 169, 181, 167, 174, 88: 173, 171, 166, 172, 170, 97: 165, 164},
		{65: 163},
		{1: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 371, 65: 162, 71: 402},
		{1: 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 65: 161},
		{1: 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 65: 159},
		// 5
		{64: 399},
		{64: 396},
		{64: 393},
		{64: 387},
		{64: 384},
		// 10
		{64: 366},
		{64: 354},
		{64: 350},
		{64: 342},
		{64: 339},
		// 15
		{64: 336},
		{64: 329},
		{64: 323},
		{64: 320},
		{64: 314},
		// 20
		{64: 221},
		{64: 103},
		{64: 102},
		{64: 101},
		{64: 100},
		// 25
		{64: 99},
		{64: 98},
		{64: 97},
		{64: 96},
		{64: 95},
		// 30
		{64: 94},
		{64: 93},
		{64: 92},
		{64: 91},
		{64: 90},
		// 35
		{64: 89},
		{64: 88},
		{64: 87},
		{64: 86},
		{64: 85},
		// 40
		{64: 84},
		{64: 83},
		{64: 82},
		{64: 81},
		{64: 80},
		// 45
		{64: 79},
		{64: 78},
		{64: 77},
		{64: 76},
		{64: 75},
		// 50
		{64: 70},
		{64: 69},
		{64: 68},
		{64: 67},
		{64: 66},
		// 55
		{64: 65},
		{64: 64},
		{64: 63},
		{51: 138, 138, 60: 223, 68: 222},
		{51: 228, 227, 80: 226, 225, 94: 224},
		// 60
		{137, 47: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 70: 137},
		{311, 46: 312},
		{141, 46: 141},
		{75: 229},
		{75: 60},
		// 65
		{75: 59},
		{1: 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 234, 66: 236, 233, 69: 235, 72: 230, 231, 232},
		{61: 310},
		{134, 46: 308, 61: 134},
		{133, 46: 303, 61: 133},
		// 70
		{130, 46: 130, 61: 130},
		{1: 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 66: 300, 299},
		{127, 46: 127, 61: 127},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 296, 125, 295},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		// 75
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		// 80
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		// 85
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		// 90
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		// 95
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		// 100
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		// 105
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		// 110
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		// 115
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		// 120
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		// 125
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
		// 130
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1: 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 66: 297},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 61: 123},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 298, 124},
		// 135
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 61: 122},
		{129, 46: 129, 61: 129},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 61: 125, 301},
		{1: 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 66: 302},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 61: 124},
		// 140
		{1: 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 66: 305, 69: 304},
		{126, 46: 126, 61: 126},
		{60: 296, 62: 306},
		{1: 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 66: 307},
		{60: 298},
		// 145
		{1: 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 66: 300, 309},
		{128, 46: 128, 61: 128},
		{139, 46: 139},
		{1: 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 65: 142},
		{51: 228, 227, 80: 226, 313},
		// 150
		{140, 46: 140},
		{54: 138, 138, 60: 223, 68: 315},
		{54: 317, 318, 93: 316},
		{319},
		{62},
		// 155
		{61},
		{1: 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 65: 143},
		{138, 60: 223, 68: 321},
		{322},
		{1: 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 65: 144},
		// 160
		{53: 138, 56: 138, 60: 223, 68: 324},
		{53: 327, 56: 326, 96: 325},
		{328},
		{105},
		{104},
		// 165
		{1: 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 65: 145},
		{60: 223, 68: 330, 70: 138},
		{70: 331},
		{57: 334, 333, 101: 332},
		{335},
		// 170
		{107},
		{106},
		{1: 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 65: 146},
		{1: 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 66: 337},
		{338},
		// 175
		{1: 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 65: 147},
		{1: 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 66: 340},
		{341},
		{1: 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 148, 65: 148},
		{1: 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 66: 343},
		// 180
		{63: 344},
		{1: 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 66: 347, 70: 348, 95: 346, 102: 345},
		{349},
		{110},
		{109},
		// 185
		{108},
		{1: 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 65: 149},
		{60: 223, 68: 351, 70: 138},
		{70: 352},
		{353},
		// 190
		{1: 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 65: 150},
		{138, 47: 138, 138, 138, 138, 60: 223, 68: 355},
		{114, 47: 359, 360, 361, 362, 87: 358, 99: 357, 356},
		{365},
		{113, 46: 363},
		// 195
		{112, 46: 112},
		{74, 46: 74},
		{73, 46: 73},
		{72, 46: 72},
		{71, 46: 71},
		// 200
		{47: 359, 360, 361, 362, 87: 364},
		{111, 46: 111},
		{1: 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 151, 65: 151},
		{1: 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 368, 66: 236, 370, 69: 369, 79: 367},
		{383},
		// 205
		{1: 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 66: 300, 380},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 371, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 71: 378},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 371, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 71: 372},
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 47: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135},
		{118, 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 66: 375, 76: 374, 373},
		// 210
		{119},
		{117, 46: 376},
		{116, 46: 116},
		{1: 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 66: 377},
		{115, 46: 115},
		// 215
		{118, 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 66: 375, 76: 374, 379},
		{120},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 371, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 71: 381},
		{118, 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 66: 375, 76: 374, 382},
		{121},
		// 220
		{1: 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 65: 152},
		{1: 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 368, 66: 236, 370, 69: 369, 79: 385},
		{386},
		{1: 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 153, 65: 153},
		{138, 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 389, 66: 236, 233, 391, 235, 72: 390, 231, 232, 82: 388},
		// 225
		{392},
		{137, 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 66: 300, 299},
		{132},
		{131},
		{1: 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 65: 154},
		// 230
		{138, 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 389, 66: 236, 233, 391, 235, 72: 390, 231, 232, 82: 394},
		{395},
		{1: 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 65: 155},
		{1: 264, 242, 244, 265, 266, 246, 267, 250, 268, 269, 270, 238, 239, 240, 241, 260, 271, 248, 252, 243, 245, 247, 254, 251, 249, 253, 255, 259, 257, 272, 263, 273, 274, 275, 262, 258, 261, 256, 276, 277, 278, 280, 279, 281, 282, 47: 291, 292, 293, 294, 286, 285, 287, 283, 284, 288, 290, 289, 237, 234, 66: 236, 233, 69: 235, 72: 397, 231, 232},
		{398},
		// 235
		{1: 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 65: 156},
		{138, 60: 223, 68: 400},
		{401},
		{1: 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 65: 157},
		{1: 218, 187, 189, 214, 216, 200, 209, 201, 196, 195, 199, 168, 184, 185, 186, 175, 179, 192, 202, 188, 190, 191, 204, 219, 193, 203, 205, 212, 207, 198, 178, 182, 220, 183, 177, 211, 176, 206, 194, 217, 197, 208, 210, 215, 213, 78: 180, 83: 169, 181, 404, 174, 88: 173, 171, 403, 172, 170},
		// 240
		{1: 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 65: 160},
		{1: 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 65: 158},
	}
)

var yyhintDebug = 0

type yyhintLexer interface {
	Lex(lval *yyhintSymType) int
	Errorf(format string, a ...interface{}) error
	AppendError(err error)
	Errors() (warns []error, errs []error)
}

type yyhintLexerEx interface {
	yyhintLexer
	Reduced(rule, state int, lval *yyhintSymType) bool
}

func yyhintSymName(c int) (s string) {
	x, ok := yyhintXLAT[c]
	if ok {
		return yyhintSymNames[x]
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yyhintlex1(yylex yyhintLexer, lval *yyhintSymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyhintEOFCode
	}
	if yyhintDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yyhintSymName(n), n, n, lval)
	}
	return n
}

func yyhintParse(yylex yyhintLexer, parser *hintParser) int {
	const yyError = 104

	yyEx, _ := yylex.(yyhintLexerEx)
	var yyn int
	parser.yylval = yyhintSymType{}
	yyS := parser.cache

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyhintDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp+1 >= len(yyS) {
		nyys := make([]yyhintSymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = yyhintlex1(yylex, &parser.yylval)
		var ok bool
		if yyxchar, ok = yyhintXLAT[yychar]; !ok {
			yyxchar = len(yyhintSymNames) // > tab width
		}
	}
	if yyhintDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyhintParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyhintTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		*parser.yyVAL = parser.yylval
		yystate = yyn
		yyshift = yyn
		if yyhintDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyhintDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyhintDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yyhintSymName(yychar), yystate)
			}
			msg, ok := yyhintXErrors[yyhintXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyhintXErrors[yyhintXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyhintXErrors[yyhintXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyhintXErrors[yyhintXError{yyshift, -1}]
			}
			if !ok || msg == "" {
				msg = "syntax error"
			}
			// ignore goyacc error message
			yylex.AppendError(yylex.Errorf(""))
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyhintParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyhintTabOfs
					if yyn > 0 { // hit
						if yyhintDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyhintDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyhintDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyhintDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyhintSymName(yychar))
			}
			if yychar == yyhintEOFCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyhintReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yyhintSymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyhintParseTab[yyS[yyp].yys][x]) + yyhintTabOfs
	/* reduction by production r */
	if yyhintDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yyhintSymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			parser.result = yyS[yypt-0].hints
		}
	case 2:
		{
			if yyS[yypt-0].hint != nil {
				parser.yyVAL.hints = []*ast.TableOptimizerHint{yyS[yypt-0].hint}
			}
		}
	case 3:
		{
			if yyS[yypt-0].hint != nil {
				parser.yyVAL.hints = append(yyS[yypt-2].hints, yyS[yypt-0].hint)
			} else {
				parser.yyVAL.hints = yyS[yypt-2].hints
			}
		}
	case 4:
		{
			parser.yyVAL.hints = yyS[yypt-0].hints
		}
	case 5:
		{
			parser.yyVAL.hints = append(yyS[yypt-2].hints, yyS[yypt-0].hints...)
		}
	case 6:
		{
			parser.warnUnsupportedHint(yyS[yypt-3].ident)
			parser.yyVAL.hint = nil
		}
	case 7:
		{
			parser.warnUnsupportedHint(yyS[yypt-3].ident)
			parser.yyVAL.hint = nil
		}
	case 8:
		{
			parser.warnUnsupportedHint(yyS[yypt-3].ident)
			parser.yyVAL.hint = nil
		}
	case 9:
		{
			h := yyS[yypt-1].hint
			h.HintName = model.NewCIStr(yyS[yypt-3].ident)
			parser.yyVAL.hint = h
		}
	case 10:
		{
			parser.warnUnsupportedHint(yyS[yypt-3].ident)
			parser.yyVAL.hint = nil
		}
	case 11:
		{
			h := yyS[yypt-1].hint
			h.HintName = model.NewCIStr(yyS[yypt-3].ident)
			parser.yyVAL.hint = h
		}
	case 12:
		{
			parser.warnUnsupportedHint(yyS[yypt-4].ident)
			parser.yyVAL.hint = nil
		}
	case 13:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName:         model.NewCIStr(yyS[yypt-4].ident),
				QBName:           model.NewCIStr(yyS[yypt-2].ident),
				MaxExecutionTime: yyS[yypt-1].number,
			}
		}
	case 14:
		{
			parser.warnUnsupportedHint(yyS[yypt-5].ident)
			parser.yyVAL.hint = nil
		}
	case 15:
		{
			parser.warnUnsupportedHint(yyS[yypt-3].ident)
			parser.yyVAL.hint = nil
		}
	case 16:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: model.NewCIStr(yyS[yypt-3].ident),
				QBName:   model.NewCIStr(yyS[yypt-1].ident),
			}
		}
	case 17:
		{
			maxValue := uint64(math.MaxInt64) / yyS[yypt-1].number
			if yyS[yypt-2].number <= maxValue {
				parser.yyVAL.hint = &ast.TableOptimizerHint{
					HintName:    model.NewCIStr(yyS[yypt-5].ident),
					MemoryQuota: int64(yyS[yypt-2].number * yyS[yypt-1].number),
					QBName:      model.NewCIStr(yyS[yypt-3].ident),
				}
			} else {
				yylex.AppendError(ErrWarnMemoryQuotaOverflow.GenWithStackByArgs(math.MaxInt64))
				parser.lastErrorAsWarn()
				parser.yyVAL.hint = nil
			}
		}
	case 18:
		{
			h := yyS[yypt-1].hint
			h.HintName = model.NewCIStr(yyS[yypt-4].ident)
			h.QBName = model.NewCIStr(yyS[yypt-2].ident)
			parser.yyVAL.hint = h
		}
	case 19:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName: model.NewCIStr(yyS[yypt-3].ident),
				QBName:   model.NewCIStr(yyS[yypt-1].ident),
			}
		}
	case 20:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				HintName:  model.NewCIStr(yyS[yypt-4].ident),
				QBName:    model.NewCIStr(yyS[yypt-2].ident),
				QueryType: model.NewCIStr(yyS[yypt-1].ident),
			}
		}
	case 21:
		{
			hs := yyS[yypt-1].hints
			name := model.NewCIStr(yyS[yypt-4].ident)
			qb := model.NewCIStr(yyS[yypt-2].ident)
			for _, h := range hs {
				h.HintName = name
				h.QBName = qb
			}
			parser.yyVAL.hints = hs
		}
	case 22:
		{
			parser.yyVAL.hints = []*ast.TableOptimizerHint{yyS[yypt-0].hint}
		}
	case 23:
		{
			parser.yyVAL.hints = append(yyS[yypt-2].hints, yyS[yypt-0].hint)
		}
	case 24:
		{
			h := yyS[yypt-1].hint
			h.StoreType = model.NewCIStr(yyS[yypt-3].ident)
			parser.yyVAL.hint = h
		}
	case 25:
		{
			parser.yyVAL.ident = ""
		}
	case 32:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				QBName: model.NewCIStr(yyS[yypt-0].ident),
			}
		}
	case 33:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				Tables: []ast.HintTable{yyS[yypt-0].table},
			}
		}
	case 34:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				Tables: []ast.HintTable{yyS[yypt-0].table},
				QBName: model.NewCIStr(yyS[yypt-1].ident),
			}
		}
	case 35:
		{
			h := yyS[yypt-2].hint
			h.Tables = append(h.Tables, yyS[yypt-0].table)
			parser.yyVAL.hint = h
		}
	case 36:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				Tables: []ast.HintTable{yyS[yypt-0].table},
			}
		}
	case 37:
		{
			h := yyS[yypt-2].hint
			h.Tables = append(h.Tables, yyS[yypt-0].table)
			parser.yyVAL.hint = h
		}
	case 38:
		{
			parser.yyVAL.table = ast.HintTable{
				TableName: model.NewCIStr(yyS[yypt-0].ident),
			}
		}
	case 39:
		{
			parser.yyVAL.table = ast.HintTable{
				DBName:    model.NewCIStr(yyS[yypt-2].ident),
				TableName: model.NewCIStr(yyS[yypt-0].ident),
			}
		}
	case 40:
		{
			parser.yyVAL.table = ast.HintTable{
				TableName: model.NewCIStr(yyS[yypt-1].ident),
				QBName:    model.NewCIStr(yyS[yypt-0].ident),
			}
		}
	case 41:
		{
			parser.yyVAL.table = ast.HintTable{
				DBName:    model.NewCIStr(yyS[yypt-3].ident),
				TableName: model.NewCIStr(yyS[yypt-1].ident),
				QBName:    model.NewCIStr(yyS[yypt-0].ident),
			}
		}
	case 42:
		{
			h := yyS[yypt-0].hint
			h.Tables = []ast.HintTable{yyS[yypt-2].table}
			h.QBName = model.NewCIStr(yyS[yypt-3].ident)
			parser.yyVAL.hint = h
		}
	case 43:
		{
			h := yyS[yypt-0].hint
			h.Tables = []ast.HintTable{yyS[yypt-2].table}
			parser.yyVAL.hint = h
		}
	case 44:
		{
			h := yyS[yypt-0].hint
			h.Tables = []ast.HintTable{yyS[yypt-2].table}
			parser.yyVAL.hint = h
		}
	case 45:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{}
		}
	case 47:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{
				Indexes: []model.CIStr{model.NewCIStr(yyS[yypt-0].ident)},
			}
		}
	case 48:
		{
			h := yyS[yypt-2].hint
			h.Indexes = append(h.Indexes, model.NewCIStr(yyS[yypt-0].ident))
			parser.yyVAL.hint = h
		}
	case 55:
		{
			parser.yyVAL.ident = strconv.FormatUint(yyS[yypt-0].number, 10)
		}
	case 56:
		{
			parser.yyVAL.number = 1024 * 1024
		}
	case 57:
		{
			parser.yyVAL.number = 1024 * 1024 * 1024
		}
	case 58:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{HintFlag: true}
		}
	case 59:
		{
			parser.yyVAL.hint = &ast.TableOptimizerHint{HintFlag: false}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, parser.yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
